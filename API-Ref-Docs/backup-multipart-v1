package com.se.apim.utility;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Base64;
import javax.mail.MessagingException;
import com.apigee.flow.execution.ExecutionContext;
import com.apigee.flow.execution.ExecutionResult;
import com.apigee.flow.execution.spi.Execution;
import com.apigee.flow.message.MessageContext;
import javax.mail.BodyPart;
import javax.mail.internet.MimeMultipart;
import javax.mail.util.ByteArrayDataSource;


public class SoapMultipartUtil implements Execution {

	@Override
	public ExecutionResult execute(MessageContext msgContext, ExecutionContext exeCtxt) {
		
		ExecutionResult calloutResult = ExecutionResult.ABORT;
		InputStream mutliPartSoapResponse = msgContext.getResponseMessage().getContentAsStream();
		msgContext.setVariable("mutliPartSoapResponse",mutliPartSoapResponse);
		if(null != mutliPartSoapResponse) {
			    String responseStr = "";
				try {
					responseStr = parseMimeResponse(mutliPartSoapResponse);
				} catch (IOException e) {
				} catch (MessagingException e) {
				}
				 msgContext.setVariable("response.content",responseStr);
				 calloutResult = ExecutionResult.SUCCESS;
				 
			  }

		return calloutResult;
	}
	
	private String buildStringFromStream(InputStream ins, boolean requiredEncoding)throws IOException, MessagingException {
		String plainResponse = "";
		if(null != ins) {
		BufferedReader in = new BufferedReader(new InputStreamReader(ins));
		String inputLine;
		StringBuilder response = new StringBuilder();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		in.close();
		plainResponse = response.toString();
		if (requiredEncoding) {
			return Base64.getEncoder().encodeToString(plainResponse.getBytes("utf-8"));
		}
		}
		return plainResponse ;

	}
	
	public String parseMimeResponse(InputStream in) throws IOException, MessagingException {
		String soapResponse = "";
		ByteArrayDataSource datasource = new ByteArrayDataSource(in, "multipart/related");
	    MimeMultipart multipart = new MimeMultipart(datasource);
	    int count = multipart.getCount();
	    for (int i = 0; i <count; i++) {
	        BodyPart bodyPart = multipart.getBodyPart(i);
	        if (bodyPart.isMimeType("application/xop+xml") || bodyPart.getContentType()=="text/xml") {
	        	soapResponse = buildStringFromStream(bodyPart.getInputStream(),false);
	        } else if (bodyPart.isMimeType("application/octet-stream")) {
	        	String encodedOctetString = buildStringFromStream(bodyPart.getInputStream(),true);
	        	soapResponse = buildSoapDownloadResponse(encodedOctetString,soapResponse);
	        } 
	    }
	    return soapResponse;
	}
	
	private String buildSoapDownloadResponse(String encodedResponse,String vSoapResponse ) {
		
		StringBuilder stringBuilder = new StringBuilder(vSoapResponse);
		String returnXMLTag = "<return>"+encodedResponse;
	    String fianlXML = stringBuilder.replace(vSoapResponse.indexOf("<return>"), vSoapResponse.indexOf("</return>"), returnXMLTag).toString();
		return fianlXML;
	}

}
